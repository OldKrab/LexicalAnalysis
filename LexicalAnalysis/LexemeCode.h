#pragma once
enum class LexemeCode : unsigned int
{
	TFor = 1,
	Tint = 2,
	TShort = 3,
	TLong = 4,
	TBool = 5,
	TMain = 6,
	TVoid = 7,
	TId = 10,
	TDecimNum = 20,
	THexNum = 21,
	TOctNum = 22,
	TComma = 30,
	TSemi = 31,
	TOpenPar = 32,
	TClosePar = 33,
	TOpenBrace = 34,
	TCloseBrace = 35,
	TAssign = 40,
	TE = 41,
	TNE = 42,
	TG = 43,
	TL = 44,
	TLE = 45,
	TGE = 46,
	TPlus = 47,
	TMinus = 48,
	TMul = 49,
	TDiv = 50,
	TModul = 51,
	TInc = 52,
	TDec = 53,
	TEnd = 100,
	TErr = 200
};

inline std::string LexicalCodeToString(LexemeCode code) {
	std::map<LexemeCode, std::string> lexicalStrings = {
		{LexemeCode::TFor, "TFor"},
		{LexemeCode::Tint, "Tint"},
		{LexemeCode::TShort, "TShort"},
		{LexemeCode::TLong, "TLong"},
		{LexemeCode::TBool, "TBool"},
		{LexemeCode::TMain, "TMain"},
		{LexemeCode::TVoid, "TVoid"},
		{LexemeCode::TId, "TId"},
		{LexemeCode::TDecimNum, "TDecimNum"},
		{LexemeCode::THexNum, "THexNum"},
		{LexemeCode::TOctNum, "TOctNum"},
		{LexemeCode::TComma, "TComma"},
		{LexemeCode::TSemi, "TSemi"},
		{LexemeCode::TOpenPar, "TOpenPar"},
		{LexemeCode::TClosePar, "TClosePar"},
		{LexemeCode::TOpenBrace, "TOpenBrace"},
		{LexemeCode::TCloseBrace, "TCloseBrace"},
		{LexemeCode::TAssign, "TAssign"},
		{LexemeCode::TE, "TE"},
		{LexemeCode::TNE, "TNE"},
		{LexemeCode::TG, "TG"},
		{LexemeCode::TL, "TL"},
		{LexemeCode::TLE, "TLE"},
		{LexemeCode::TGE, "TGE"},
		{LexemeCode::TPlus, "TPlus"},
		{LexemeCode::TMinus, "TMinus"},
		{LexemeCode::TMul, "TMul"},
		{LexemeCode::TDiv, "TDiv"},
		{LexemeCode::TModul, "TModul"},
		{LexemeCode::TInc, "TInc"},
		{LexemeCode::TDec, "TDec"},
		{LexemeCode::TEnd, "TEnd"},
		{LexemeCode::TErr, "TErr"},
	};
	
	return lexicalStrings.at(code);
}

